<?php

function vm_menu() {
    $items['admin/config/content/vm'] = array(
        'title' => 'Versioning Machine settings',
        'description' => 'Set the XPath queries for TEI upload to Versioning Machine',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('vm_admin_form'),
        'access arguments' => array('administer vm'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/config/content/vm/rebuild'] = array(
      'title' => 'Rebuild Versioning Machine settings',
      'description' => 'If Versioning Machine texts are not displaying correctly, try rebuilding the settings.',
      'page callback' => 'vm_rebuild_xsl',
      'access arguments' => array('administer vm'),
      'type' => MENU_CALLBACK,
    );
    $items['admin/config/content/vm/process_all'] = array(
      'title' => 'Recreate all Versioning Machine texts',
      'description' => 'Rebuilds all texts in Versioning Machine using current Drupal settings',
      'page callback' => 'vm_reprocess_texts',
      'access arguments' => array('administer vm'),
      'type' => MENU_CALLBACK,
    );
    return $items;
}

function vm_permission() {
    return array(
        'upload tei' => array(
          'title' => t('Upload TEI files'),
          'description' => t('Allow users to upload TEI for use in Versioning Machine'),
        ),
        'administer vm' => array(
            'title' => t('Administer Versioning Machine'),
            'description' => t('Allow users to adminster Versioning Machine settings')
        )
    );
}

function vm_admin_form() {
  global $base_url;
  $form = array();
  $form['vm_xsltproc'] = array(
      '#type' => 'textfield',
      '#title' => t('Location of system xsltproc'),
      '#default_value' => variable_get('vm_xsltproc', '/usr/bin/xsltproc'),
  );
  $form['vm_subdomain'] = array(
      '#type' => 'textfield',
      '#title' => t('Domain name for the versioning machine'),
      '#default_value' => variable_get('vm_subdomain', ''),
  );
  $form['help_text'] = array(
    '#markup' => '<p></p><a href="' .
      $base_url . '/admin/config/content/vm/rebuild">Rebuild XSL</a></p>' .
      '<p><a href="' . $base_url . '/admin/config/content/vm/process_all">Recreate all Versioning Machine texts</a></p>'
  );
  return system_settings_form($form);
}

// Alter form for editing nodes to hide the link, handle the submit
function vm_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'text_node_form') {
    $form['field_vm_link']['#access'] = FALSE;
    $form['actions']['submit']['#submit'] = array('vm_text_form_submit');
  }
}

// Run XSLT on uploaded TEI; takes the Drupal text node as an argument
function vm_process_text($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $vm_path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'vm') . '/VersioningMachine';
  $file = file_load($wrapper->field_tei_file->value()['fid']);
  $filename = drupal_realpath($file->uri);
  if (!file_exists($vm_path . '/src/drupal_settings.xsl')) {
    vm_rebuild_xsl(TRUE);
  }
  $cmd = variable_get('vm_xsltproc') . " " . $vm_path . "/src/vmachine.xsl '" . $filename . "'";
  $output = array();
  $return = -1;
  exec($cmd, $output, $return);   // run xsltproc
  if ($return == 0) { // Success!
    $basename = basename($filename, '.xml');
    $vm_filename = $vm_path . '/texts/' . $basename . '.html';
    file_unmanaged_save_data($output, $vm_filename, FILE_EXISTS_REPLACE);
    $url = variable_get('vm_subdomain');
    if (empty($url)) {
      $url = drupal_get_path('module', 'vm') . '/VersioningMachine/texts/';
    } else {
      $url .= '/';
    }
    $url .= basename($vm_filename);
    $wrapper->field_vm_link->set(array(
      'title' => 'Go to Text',
      'url' => $url
    ));
  } else {
    drupal_set_message(t('Versioning Machine was unable to process this file. Please check it for errors and try again.'), 'error');
  }
  $wrapper->save();
  return $return;
}

/***
 * @param $form
 * @param $form_state
 *
 * Parse the TEI to extract field data; update the node with a link to the text in VM
 * Warning: this whole process is insecure. Be careful who has access.
 */
function vm_text_form_submit($form, &$form_state) {
    // Convert the file to HTML via VersioningMachine
    // Really ugly, but PHP doesn't support XSLT 2.0, which is required
    // by VersioningMachine, so this is how we're gonna do it
    $node = node_form_submit_build_node($form, $form_state);
    $node->status = NODE_PUBLISHED;
    if (user_access('upload tei')) {
      vm_process_text($node);
    }
    drupal_goto(drupal_get_path_alias('node/' . $node->nid));
}

// Recreate the drupal_settings.xsl file
function vm_rebuild_xsl($silent = FALSE) {
  global $base_path;
  $path = drupal_get_path('module', 'vm') . '/VersioningMachine';
  $image_field = field_info_instance('node', 'field_image', 'text');
  $image_path = variable_get('file_public_path', conf_path() . '/files') . '/' .
  $image_field['settings']['file_directory'] . '/';
  $string = '<?xml version="1.0" encoding="UTF-8"?' . '>'; // so PHP doesn't
  // choke
  $string .= '<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ';
  $string .= 'xmlns:xs="http://www.w3.org/2001/XMLSchema" ';
  $string .= 'exclude-result-prefixes="xs" ';
  $string .= 'version="1.0">';
  $string .= '<xsl:variable name="vmImages">';
  $string .= $base_path . $path . '/vm-images/';
  $string .= '</xsl:variable>';
  $string .= '<xsl:variable name="vmAudio">';
  $string .= $base_path . $path . '/vm-audio/';
  $string .= '</xsl:variable>';
  $string .= '<xsl:variable name="facsImageFolder">';
  $string .= $base_path . $image_path;
  $string .= '</xsl:variable>';
  $string .= '</xsl:stylesheet>';
  file_unmanaged_save_data($string, $path . '/src/drupal_settings.xsl',
    FILE_EXISTS_REPLACE);
  if (!$silent) {
    drupal_set_message(t('XSL settings have been recreated.'), 'info');
    drupal_goto('admin/config/content/vm');
  }
}

// Reprocess all XML
function vm_reprocess_texts() {
  $status = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'text');
  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
    foreach ($nodes as $node) {
      $status[$node->title] = vm_process_text($node);
    }
  }
  foreach ($status as $title => $result) {
    if ($result == 0) {
      drupal_set_message(t($title . " was successfully processed."),
      'info');
    } else {
      drupal_set_message(t($title . ' failed to processed. Error code: ' .
        $result), 'error');
    }
  }
  drupal_goto('admin/config/content/vm');
}

