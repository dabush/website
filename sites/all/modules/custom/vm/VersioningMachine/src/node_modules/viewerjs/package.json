{
  "_args": [
    [
      "viewerjs",
      "/var/www/gms/website/sites/all/modules/custom/vm/VersioningMachine/src"
    ]
  ],
  "_from": "viewerjs",
  "_id": "viewerjs@0.7.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/viewerjs",
  "_phantomChildren": {},
  "_requested": {
    "name": null,
    "raw": "viewerjs",
    "rawSpec": "viewerjs",
    "scope": null,
    "spec": "/var/www/gms/website/sites/all/modules/custom/vm/VersioningMachine/src/viewerjs",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:viewerjs",
  "_shasum": "8d2ec22dd968fb4d3d8cabd8825ba605e5743942",
  "_shrinkwrap": null,
  "_spec": "viewerjs",
  "_where": "/var/www/gms/website/sites/all/modules/custom/vm/VersioningMachine/src",
  "author": {
    "name": "Fengyuan Chen",
    "url": "http://chenfengyuan.com"
  },
  "bugs": {
    "url": "https://github.com/fengyuanchen/viewerjs/issues"
  },
  "dependencies": {},
  "description": "JavaScript image viewer.",
  "devDependencies": {
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-preset-es2015": "^6.22.0",
    "cssnano": "^3.10.0",
    "eslint": "^3.17.0",
    "eslint-config-airbnb-base": "^10.0.1",
    "eslint-plugin-import": "^2.2.0",
    "node-qunit-phantomjs": "^1.5.0",
    "npm-run-all": "^3.1.2",
    "postcss-assets": "^4.1.0",
    "postcss-cli": "^2.6.0",
    "postcss-cssnext": "^2.9.0",
    "rollup": "^0.36.4",
    "rollup-plugin-babel": "^2.7.1",
    "rollup-watch": "^2.5.0",
    "uglify-js": "^2.8.5"
  },
  "homepage": "https://fengyuanchen.github.io/viewerjs",
  "keywords": [
    "component",
    "css",
    "development",
    "front-end",
    "html",
    "image",
    "javascript",
    "view",
    "viewer",
    "viewer.js",
    "viewerjs",
    "web"
  ],
  "license": "MIT",
  "main": "dist/viewer.js",
  "name": "viewerjs",
  "optionalDependencies": {},
  "readme": "# Viewer.js\n\n> JavaScript image viewer.\n\n- [Website](https://fengyuanchen.github.io/viewerjs)\n\n[![Build Status Images](https://travis-ci.org/fengyuanchen/viewerjs.svg)](https://travis-ci.org/fengyuanchen/viewerjs)\n\n\n\n## Table of contents\n\n- [Features](#features)\n- [Main](#main)\n- [Getting started](#getting-started)\n- [Keyboard support](#keyboard-support)\n- [Options](#options)\n- [Methods](#methods)\n- [Events](#events)\n- [No conflict](#no-conflict)\n- [Browser support](#browser-support)\n- [Contributing](#contributing)\n- [Versioning](#versioning)\n- [License](#license)\n\n\n\n## Features\n\n- Supports 29 [options](#options)\n- Supports 23 [methods](#methods)\n- Supports 7 [events](#events)\n- Supports modal and inline modes\n- Supports touch\n- Supports move\n- Supports zoom\n- Supports rotation\n- Supports scale (flip)\n- Supports keyboard\n- Cross-browser support\n\n\n\n## Main\n\n```\ndist/\n├── viewer.css       ( 8 KB)\n├── viewer.min.css   ( 7 KB)\n├── viewer.js        (60 KB, UMD)\n├── viewer.min.js    (26 KB, UMD, compressed)\n├── viewer.common.js (60 KB, CommonJS)\n└── viewer.esm.js    (60 KB, ES Module)\n```\n\n\n\n## Getting started\n\n### Quick start\n\nThree quick start options are available:\n\n- [Download the latest release](https://github.com/fengyuanchen/viewerjs/archive/master.zip).\n- Clone the repository: `git clone https://github.com/fengyuanchen/viewerjs.git`.\n- Install with [NPM](https://npmjs.com): `npm install viewerjs`.\n\n\n\n### Installation\n\nInclude files:\n\n```html\n<link  href=\"/path/to/viewer.css\" rel=\"stylesheet\">\n<script src=\"/path/to/viewer.js\"></script>\n```\n\n\n\n### Usage\n\nInitialize with `Viewer` constructor:\n\n- Browser: `window.Viewer`\n- CommonJS: `var Viewer = require('viewerjs')`\n- ES2015: `import Viewer from 'viewerjs'`\n\n```html\n<!-- a block container is required -->\n<div>\n  <img id=\"image\" src=\"picture.jpg\" alt=\"Picture\">\n</div>\n\n<div>\n  <ul id=\"images\">\n    <li><img src=\"picture.jpg\" alt=\"Picture\"></li>\n    <li><img src=\"picture-2.jpg\" alt=\"Picture 2\"></li>\n    <li><img src=\"picture-3.jpg\" alt=\"Picture 3\"></li>\n  </ul>\n</div>\n```\n\n```js\n// View one image\nvar viewer = new Viewer(document.getElementById('image'), options);\n\n// View some images\nvar viewer = new Viewer(document.getElementById('images'), options);\n```\n\n\n\n## Keyboard support\n\n> Only available in modal mode.\n\n- `Esc`: Exit full screen or stop play.\n- `Space`: Stop play.\n- `←`: View the previous image.\n- `→`: View the next image.\n- `↑`: Zoom in the image.\n- `↓`: Zoom out the image.\n- `Ctrl + 0`: Zoom out to initial size.\n- `Ctrl + 1`: Zoom in to natural size.\n\n\n[⬆ back to top](#table-of-contents)\n\n\n\n## Options\n\nYou may set viewer options with `new Viewer(image, options)`.\nIf you want to change the global default options, You may use `Viewer.setDefaults(options)`.\n\n\n### inline\n\n- Type: `Boolean`\n- Default: `false`\n\nEnable inline mode.\n\n\n### button\n\n- Type: `Boolean`\n- Default: `true`\n\nShow the button on the top-right of the viewer.\n\n\n### navbar\n\n- Type: `Boolean` or `Number`\n- Default: `true`\n- Options:\n  - `0` or `false`: hide the navbar\n  - `1` or `true`: show the navbar\n  - `2`: show the navbar only when screen width great then 768 pixels\n  - `3`: show the navbar only when screen width great then 992 pixels\n  - `4`: show the navbar only when screen width great then 1200 pixels\n\nSpecify the visibility of the navbar.\n\n\n### title\n\n- Type: `Boolean` or `Number`\n- Default: `true`\n- Options:\n  - `0` or `false`: hide the title\n  - `1` or `true`: show the title\n  - `2`: show the title only when screen width great then 768 pixels\n  - `3`: show the title only when screen width great then 992 pixels\n  - `4`: show the title only when screen width great then 1200 pixels\n\nSpecify the visibility of the title (the current image's name and dimensions).\n\n> The name comes from the `alt` attribute of an image element or the image name parsed from URL.\n\n\n### toolbar\n\n- Type: `Boolean` or `Number`\n- Default: `true`\n- Options:\n  - `0` or `false`: hide the toolbar\n  - `1` or `true`: show the toolbar\n  - `2`: show the toolbar only when screen width great then 768 pixels\n  - `3`: show the toolbar only when screen width great then 992 pixels\n  - `4`: show the toolbar only when screen width great then 1200 pixels\n\nSpecify the visibility of the toolbar.\n\n\n### tooltip\n\n- Type: `Boolean`\n- Default: `true`\n\nShow the tooltip with image ratio (percentage) when zoom in or zoom out\n\n\n### movable\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to move the image.\n\n\n### zoomable\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to zoom the image.\n\n\n### rotatable\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to rotate the image.\n\n\n### scalable\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to scale the image.\n\n\n### transition\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable CSS3 Transition for some special elements.\n\n\n### fullscreen\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable to request full screen when play.\n\n> Requires the browser supports [Full Screen API](http://caniuse.com/fullscreen).\n\n\n### keyboard\n\n- Type: `Boolean`\n- Default: `true`\n\nEnable keyboard support.\n\n\n### interval\n\n- Type: `Number`\n- Default: `5000`\n\nDefine interval of each image when playing.\n\n\n### minWidth\n\n- Type: `Number`\n- Default: 200\n\nDefine the minimum width of the viewer.\n\n> Only available in inline mode (set the `inline` option to `true`).\n\n\n### minHeight\n\n- Type: `Number`\n- Default: 100\n\nDefine the minimum height of the viewer.\n\n> Only available in inline mode (set the `inline` option to `true`).\n\n\n### zoomRatio\n\n- Type: `Number`\n- Default: `0.1`\n\nDefine the ratio when zoom the image by wheeling mouse.\n\n\n### minZoomRatio\n\n- Type: `Number`\n- Default: `0.01`\n\nDefine the min ratio of the image when zoom out.\n\n\n### maxZoomRatio\n\n- Type: `Number`\n- Default: `100`\n\nDefine the max ratio of the image when zoom in.\n\n\n### zIndex\n\n- Type: `Number`\n- Default: `2015`\n\nDefine the CSS `z-index` value of viewer in modal mode.\n\n\n### zIndexInline\n\n- Type: `Number`\n- Default: `0`\n\nDefine the CSS `z-index` value of viewer in inline mode.\n\n\n### url\n\n- Type: `String` or `Function`\n- Default: `'src'`\n\nDefine where to get the original image URL for viewing.\n\n> If it is a string, it should be one of the attributes of each image element.\n> If it is a function, it will be called on each image and should return a valid image URL.\n\n\n### ready\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the `ready` event.\n\n\n### show\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the `show` event.\n\n\n### shown\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the `shown` event.\n\n\n### hide\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the `hide` event.\n\n\n### hidden\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the `hidden` event.\n\n\n### view\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the `view` event.\n\n\n### viewed\n\n- Type: `Function`\n- Default: `null`\n\nA shortcut of the `viewed` event.\n\n\n[⬆ back to top](#table-of-contents)\n\n\n\n## Methods\n\nAll methods allow chain composition.\n\nAs there are some **asynchronous** processes when start the viewer, you should call a method only when it is available, see the following **lifecycle**:\n\n```js\nnew Viewer(image, {\n  ready: function () {\n    // 2 methods are available here: \"show\" and \"destroy\".\n  },\n  shown: function () {\n    // 9 methods are available here: \"hide\", \"view\", \"prev\", \"next\", \"play\", \"stop\", \"full\", \"exit\" and \"destroy\".\n  },\n  viewed: function () {\n    // All methods are available here except \"show\".\n    this.viewer.zoomTo(1).rotateTo(180);\n  }\n});\n```\n\n\n### show()\n\nShow the viewer.\n\n> Only available in modal mode.\n\n\n\n### hide()\n\nhide the viewer.\n\n> Only available in modal mode.\n\n\n\n### view([index])\n\n- **index** (optional):\n  - Type: `Number`\n  - Default: `0`\n  - The index of the image for viewing\n\nView one of the images with image's index.\n\n```js\nviewer.view(1); // View the second image\n```\n\n\n### prev()\n\nView the previous image.\n\n\n### next()\n\nView the next image.\n\n\n### move(offsetX[, offsetY])\n\n- **offsetX**:\n  - Type: `Number`\n  - Moving size (px) in the horizontal direction\n\n- **offsetY** (optional):\n  - Type: `Number`\n  - Moving size (px) in the vertical direction.\n  - If not present, its default value is `offsetX`\n\nMove the image with relative offsets.\n\n```js\nviewer.move(1);\nviewer.move(-1, 0); // Move left\nviewer.move(1, 0);  // Move right\nviewer.move(0, -1); // Move up\nviewer.move(0, 1);  // Move down\n```\n\n\n### moveTo(x[, y])\n\n- **x**:\n  - Type: `Number`\n  - The `left` value of the image\n\n- **y** (optional):\n  - Type: `Number`\n  - The `top` value of the image\n  - If not present, its default value is `x`.\n\nMove the image to an absolute point.\n\n\n### zoom(ratio[, hasTooltip])\n\n- **ratio**:\n  - Type: `Number`\n  - Zoom in: requires a positive number (ratio > 0)\n  - Zoom out: requires a negative number (ratio < 0)\n\n- **hasTooltip** (optional):\n  - Type: `Boolean`\n  - Default: `false`\n  - Show tooltip\n\nZoom the image with a relative ratio\n\n```js\nviewer.zoom(0.1);\nviewer.zoom(-0.1);\n```\n\n\n### zoomTo(ratio[, hasTooltip])\n\n- **ratio**:\n  - Type: `Number`\n  - Requires a positive number (ratio > 0)\n\n- **hasTooltip** (optional):\n  - Type: `Boolean`\n  - Default: `false`\n  - Show tooltip\n\nZoom the image to an absolute ratio.\n\n```js\nviewer.zoomTo(0); // Zoom to zero size (0%)\nviewer.zoomTo(1); // Zoom to natural size (100%)\n```\n\n\n### rotate(degree)\n\n- **degree**:\n  - Type: `Number`\n  - Rotate right: requires a positive number (degree > 0)\n  - Rotate left: requires a negative number (degree < 0)\n\nRotate the image with a relative degree.\n\n```js\nviewer.rotate(90);\nviewer.rotate(-90);\n```\n\n\n### rotateTo(degree)\n\n- **degree**:\n  - Type: `Number`\n\nRotate the image to an absolute degree.\n\n```js\nviewer.rotateTo(0); // Reset to zero degree\nviewer.rotateTo(360); // Rotate a full round\n```\n\n\n### scale(scaleX[, scaleY])\n\n- **scaleX**:\n  - Type: `Number`\n  - Default: `1`\n  - The scaling factor to apply on the abscissa of the image\n  - When equal to `1` it does nothing.\n\n- **scaleY** (optional):\n  - Type: `Number`\n  - The scaling factor to apply on the ordinate of the image\n  - If not present, its default value is `scaleX`.\n\nScale the image.\n\n```js\nviewer.scale(-1); // Flip both horizontal and vertical\nviewer.scale(-1, 1); // Flip horizontal\nviewer.scale(1, -1); // Flip vertical\n```\n\n### scaleX(scaleX)\n\n- **scaleX**:\n  - Type: `Number`\n  - Default: `1`\n  - The scaling factor to apply on the abscissa of the image\n  - When equal to `1` it does nothing\n\nScale the abscissa of the image.\n\n```js\nviewer.scaleX(-1); // Flip horizontal\n```\n\n\n### scaleY(scaleY)\n\n- **scaleY**:\n  - Type: `Number`\n  - Default: `1`\n  - The scaling factor to apply on the ordinate of the image\n  - When equal to `1` it does nothing\n\nScale the ordinate of the image.\n\n```js\nviewer.scaleY(-1); // Flip vertical\n```\n\n\n### play()\n\nPlay the images.\n\n\n### stop()\n\nStop play.\n\n\n### full()\n\nEnter modal mode.\n\n> Only available in inline mode.\n\n\n### exit()\n\nExit  modal mode.\n\n> Only available in inline mode.\n\n\n### tooltip()\n\nShow the current ratio of the image with percentage.\n\n> Requires the `tooltip` option set to `true`.\n\n\n### toggle()\n\nToggle the image size between its natural size and initial size.\n\n\n### reset()\n\nReset the image to its initial state.\n\n\n### update()\n\nUpdate the viewer instance when the source images changed (added, removed or sorted).\n\n> If you load images dynamically (with XMLHTTPRequest), you can use this method to add the new images to the viewer instance.\n\n\n### destroy()\n\nDestroy the viewer and remove the instance.\n\n\n[⬆ back to top](#table-of-contents)\n\n\n\n## Events\n\nAll events can access the viewer instance with `this.viewer` in its handler.\n\n```js\nvar viewer;\n\nimage.addEventListener('viewed', function () {\n  console.log(this.viewer === viewer);\n  // -> true\n}, false);\n\nviewer = new Viewer(image);\n```\n\n\n### ready\n\nThis event fires when a viewer instance is ready for viewing.\n\n> In modal mode, this event will not be triggered until you click on one of the images.\n\n\n### show\n\nThis event fires when the viewer modal starts to show.\n\n> Only available in modal mode.\n\n\n### shown\n\nThis event fires when the viewer modal has shown.\n\n> Only available in modal mode.\n\n\n### hide\n\nThis event fires when the viewer modal starts to hide.\n\n> Only available in modal mode.\n\n\n### hidden\n\nThis event fires when the viewer modal has hidden.\n\n> Only available in modal mode.\n\n\n### view\n\n- **event.detail.originalImage**:\n  - Type: `HTMLImageElement`\n  - The original image.\n\n- **event.detail.index**:\n  - Type: `Number`\n  - The index of the original image.\n\n- **event.detail.image**:\n  - Type: `HTMLImageElement`\n  - The current image (a clone of the original image).\n\nThis event fires when a viewer starts to show (view) an image.\n\n\n### viewed\n\n- **event.detail**: the same as the `view` event.\n\nThis event fires when a viewer has shown (viewed) an image.\n\n\n[⬆ back to top](#table-of-contents)\n\n\n\n## No conflict\n\nIf you have to use other viewer with the same namespace, just call the `Viewer.noConflict` static method to revert to it.\n\n```html\n<script src=\"other-viewer.js\"></script>\n<script src=\"viewer.js\"></script>\n<script>\n  Viewer.noConflict();\n  // Code that uses other `Viewer` can follow here.\n</script>\n```\n\n\n\n## Browser support\n\n- Chrome (latest)\n- Firefox (latest)\n- Safari (latest)\n- Opera (latest)\n- Edge (latest)\n- Internet Explorer 9+\n\n\n\n## Contributing\n\nPlease read through our [contributing guidelines](CONTRIBUTING.md).\n\n\n\n## Versioning\n\nMaintained under the [Semantic Versioning guidelines](http://semver.org/).\n\n\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) © [Fengyuan Chen](http://chenfengyuan.com)\n\n\n[⬆ back to top](#table-of-contents)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fengyuanchen/viewerjs.git"
  },
  "scripts": {
    "build": "npm run build:css && npm run build:js",
    "build:css": "postcss -c postcss.config.json",
    "build:js": "rollup -c",
    "compress": "npm run compress:css && npm run compress:js",
    "compress:css": "postcss -u cssnano dist/viewer.css -o dist/viewer.min.css",
    "compress:js": "uglifyjs dist/viewer.js -o dist/viewer.min.js -c -m --comments /^!/",
    "lint": "eslint src/js",
    "postbuild": "npm run compress && node build",
    "prebuild": "npm run lint && npm test",
    "start": "npm-run-all --parallel watch:*",
    "test": "node-qunit-phantomjs test/index.html --timeout 10",
    "watch:css": "postcss -c postcss.config.json -w",
    "watch:js": "rollup -c -w -m"
  },
  "version": "0.7.1"
}
